#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TURAN Video Generator - CLI Runner
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import argparse
import sys
import yaml
import json
from pathlib import Path
from main import TuranVideoGenerator, VideoGenerationConfig, VeoModel, AspectRatio, Resolution

def load_config(config_path: str = "config.yaml") -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return {}
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

def create_config_from_args(args, config_data: dict) -> VideoGenerationConfig:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ CLI –∏ —Ñ–∞–π–ª–∞ config.yaml"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    defaults = config_data.get('video_defaults', {})
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model_name = args.model or defaults.get('default_model', 'veo-3.0-generate-001')
    model_map = {
        'veo-2.0': VeoModel.VEO_2_GENERATE,
        'veo-2.0-exp': VeoModel.VEO_2_GENERATE_EXP,
        'veo-3.0': VeoModel.VEO_3_GENERATE,
        'veo-3.0-fast': VeoModel.VEO_3_FAST_GENERATE,
        'veo-3.0-preview': VeoModel.VEO_3_GENERATE_PREVIEW,
        'veo-3.0-fast-preview': VeoModel.VEO_3_FAST_GENERATE_PREVIEW,
    }
    
    model = model_map.get(model_name, VeoModel.VEO_3_GENERATE)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    aspect_ratio = AspectRatio.PORTRAIT if args.portrait else AspectRatio.LANDSCAPE
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    resolution = Resolution.HD if args.hd else Resolution.FULL_HD
    
    return VideoGenerationConfig(
        model=model,
        duration_seconds=args.duration or defaults.get('duration_seconds', 8),
        aspect_ratio=aspect_ratio,
        resolution=resolution,
        sample_count=args.samples or defaults.get('sample_count', 1),
        generate_audio=not args.no_audio and defaults.get('generate_audio', True),
        enhance_prompt=not args.no_enhance and defaults.get('enhance_prompt', True),
        compression_quality=args.quality or defaults.get('compression_quality', 'optimized'),
        person_generation=defaults.get('person_generation', 'allow_adult'),
        seed=args.seed
    )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="üé¨ TURAN Video Generator - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –≤–∏–¥–µ–æ –¥–ª—è –º–µ–±–µ–ª–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
  python run_turan_generator.py -i images/furniture -o output/videos

  # –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–≤—å—é
  python run_turan_generator.py -i images/furniture -o output/preview --preview

  # Instagram Stories (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ)
  python run_turan_generator.py -i images/furniture -o output/instagram --portrait

  # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è YouTube
  python run_turan_generator.py -i images/furniture -o output/youtube --model veo-3.0 --duration 8 --quality lossless

  # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ü—Å–µ—Ç–µ–π
  python run_turan_generator.py -i images/furniture -o output --batch-social-media
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('-i', '--input', 
                       help='–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –º–µ–±–µ–ª–∏', 
                       default='images/furniture')
    
    parser.add_argument('-o', '--output', 
                       help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ', 
                       default='output/videos')
    
    parser.add_argument('-c', '--config', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 
                       default='config.yaml')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
    parser.add_argument('--model', 
                       choices=['veo-2.0', 'veo-2.0-exp', 'veo-3.0', 'veo-3.0-fast', 
                               'veo-3.0-preview', 'veo-3.0-fast-preview'],
                       help='–ú–æ–¥–µ–ª—å Veo –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    
    parser.add_argument('--duration', type=int, 
                       choices=[4, 5, 6, 7, 8],
                       help='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    
    parser.add_argument('--samples', type=int, 
                       choices=range(1, 5),
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    
    parser.add_argument('--seed', type=int,
                       help='Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    # –§–æ—Ä–º–∞—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    parser.add_argument('--portrait', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (9:16) –¥–ª—è Stories/TikTok')
    
    parser.add_argument('--hd', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 720p –≤–º–µ—Å—Ç–æ 1080p')
    
    parser.add_argument('--quality', 
                       choices=['optimized', 'lossless'],
                       help='–ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('--no-audio', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–≤—É–∫–∞')
    
    parser.add_argument('--no-enhance', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini')
    
    parser.add_argument('--preview', action='store_true',
                       help='–†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ–≤—å—é (4 —Å–µ–∫, 720p, –±–µ–∑ –∑–≤—É–∫–∞)')
    
    parser.add_argument('--storage-uri',
                       help='URI Google Cloud Storage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (gs://bucket/path/)')
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    parser.add_argument('--batch-social-media', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ü—Å–µ—Ç–µ–π (YouTube, Instagram, TikTok)')
    
    parser.add_argument('--single-image',
                       help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
    
    parser.add_argument('--custom-prompt',
                       help='–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    
    # –£—Ç–∏–ª–∏—Ç—ã
    parser.add_argument('--dry-run', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞')
    
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = load_config(args.config)
    
    print("üé¨ TURAN Video Generator")
    print("=" * 50)
    
    if args.verbose:
        print(f"üìÅ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {args.input}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {args.output}")
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
        print("-" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        generator = TuranVideoGenerator()
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    # –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ–≤—å—é
    if args.preview:
        print("üöÄ –†–µ–∂–∏–º –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–µ–≤—å—é")
        config = VideoGenerationConfig(
            model=VeoModel.VEO_3_FAST_GENERATE,
            duration_seconds=4,
            aspect_ratio=AspectRatio.LANDSCAPE,
            resolution=Resolution.HD,
            generate_audio=True,
            sample_count=1
        )
    else:
        config = create_config_from_args(args, config_data)
    
    if args.verbose:
        print(f"üìπ –ú–æ–¥–µ–ª—å: {config.model.value}")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.duration_seconds} —Å–µ–∫")
        print(f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {config.aspect_ratio.value}")
        print(f"üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.resolution.value}")
        print(f"üîä –ó–≤—É–∫: {'–î–∞' if config.generate_audio else '–ù–µ—Ç'}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {config.sample_count}")
        print("-" * 50)
    
    # Dry run —Ä–µ–∂–∏–º
    if args.dry_run:
        print("üîç DRY RUN - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        
        if args.single_image:
            print(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {args.single_image}")
        else:
            input_path = Path(args.input)
            if input_path.exists():
                images = list(input_path.glob("*.jpg")) + list(input_path.glob("*.png")) + list(input_path.glob("*.jpeg"))
                print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(images)}")
                for img in images[:5]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 5
                    print(f"  - {img.name}")
                if len(images) > 5:
                    print(f"  ... –∏ –µ—â–µ {len(images) - 5}")
            else:
                print(f"‚ùå –ü–∞–ø–∫–∞ {args.input} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")
        if args.storage_uri:
            print(f"‚òÅÔ∏è GCS URI: {args.storage_uri}")
        
        print("\n‚ñ∂Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    Path(args.output).mkdir(parents=True, exist_ok=True)
    
    try:
        # –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
        if args.batch_social_media:
            print("üì± –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π")
            
            social_configs = generator.create_batch_config_for_social_media()
            platforms = ['youtube', 'instagram_stories', 'tiktok']
            
            for platform in platforms:
                platform_output = Path(args.output) / platform
                platform_output.mkdir(exist_ok=True)
                
                print(f"\nüé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è {platform.upper()}")
                
                # –í—ã–±–æ—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if platform == 'youtube':
                    platform_config = social_configs[0]  # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ
                elif platform in ['instagram_stories', 'tiktok']:
                    platform_config = social_configs[1]  # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ
                
                results = generator.process_image_folder(
                    args.input,
                    str(platform_output),
                    platform_config,
                    storage_uri=args.storage_uri
                )
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                successful = sum(1 for r in results if r.get("status") == "success")
                print(f"‚úÖ {platform}: {successful}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif args.single_image:
            print(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {args.single_image}")
            
            operation_name = generator.generate_video_from_image(
                args.single_image,
                config,
                custom_prompt=args.custom_prompt,
                storage_uri=args.storage_uri
            )
            
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            result = generator.poll_operation_status(operation_name)
            
            if "response" in result:
                videos = result["response"].get("videos", [])
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤–∏–¥–µ–æ: {len(videos)} —Ñ–∞–π–ª–æ–≤")
                
                for i, video in enumerate(videos):
                    if "gcsUri" in video:
                        print(f"‚òÅÔ∏è GCS: {video['gcsUri']}")
                    elif "bytesBase64Encoded" in video:
                        filename = f"{Path(args.single_image).stem}_video_{i}.mp4"
                        output_path = Path(args.output) / filename
                        
                        import base64
                        video_data = base64.b64decode(video["bytesBase64Encoded"])
                        with open(output_path, 'wb') as f:
                            f.write(video_data)
                        
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        else:
            print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: {args.input}")
            
            results = generator.process_image_folder(
                args.input,
                args.output,
                config,
                storage_uri=args.storage_uri
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            report_path = Path(args.output) / "generation_report.json"
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            successful = sum(1 for r in results if r.get("status") == "success")
            failed = len(results) - successful
            
            print(f"\nüéâ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
            print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
            print(f"üìä –í—Å–µ–≥–æ: {len(results)}")
            print(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")
            
            if failed > 0:
                print(f"\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏:")
                for result in results:
                    if result.get("status") == "error":
                        print(f"  - {result['source_image']}: {result.get('error', 'Unknown error')}")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()