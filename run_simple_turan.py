#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
TURAN Simple Dressing Table Video Generator - Enhanced CLI Runner
–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∫–∞–∑ —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ —Å –≥–æ—Ç–æ–≤–æ–π —Ä—É—Å—Å–∫–æ–π –æ–∑–≤—É—á–∫–æ–π + –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
"""

import argparse
import sys
import yaml
import json
from pathlib import Path
from main import SimpleTuranGenerator, VideoGenerationConfig, VeoModel, AspectRatio, Resolution, CinematicStyle, LightingMood

def load_config(config_path: str = "simple_turan_config.yaml") -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        print(f"‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        return {}
    except yaml.YAMLError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

def create_config_from_args(args, config_data: dict) -> VideoGenerationConfig:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ CLI"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    defaults = config_data.get('video_defaults', {})
    enhanced_defaults = config_data.get('enhanced_settings', {})
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º VEO 3.0 –∏ 8 —Å–µ–∫—É–Ω–¥
    model = VeoModel.VEO_3_GENERATE
    duration = 8
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    aspect_ratio = AspectRatio.PORTRAIT if args.portrait else AspectRatio.LANDSCAPE
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    resolution = Resolution.HD if args.hd else Resolution.FULL_HD
    
    # –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    cinematic_style_map = {
        'commercial': CinematicStyle.COMMERCIAL,
        'lifestyle': CinematicStyle.LIFESTYLE,
        'dramatic': CinematicStyle.DRAMATIC,
        'intimate': CinematicStyle.INTIMATE
    }
    
    lighting_mood_map = {
        'golden_hour': LightingMood.GOLDEN_HOUR,
        'morning_soft': LightingMood.MORNING_SOFT,
        'evening_warm': LightingMood.EVENING_WARM,
        'dramatic_contrast': LightingMood.DRAMATIC_CONTRAST,
        'natural_bright': LightingMood.NATURAL_BRIGHT
    }
    
    cinematic_style = cinematic_style_map.get(
        args.cinematic_style or enhanced_defaults.get('default_cinematic_style', 'commercial'),
        CinematicStyle.COMMERCIAL
    )
    
    lighting_mood = lighting_mood_map.get(
        args.lighting_mood or enhanced_defaults.get('default_lighting_mood', 'golden_hour'),
        LightingMood.GOLDEN_HOUR
    )
    
    return VideoGenerationConfig(
        model=model,
        duration_seconds=duration,
        aspect_ratio=aspect_ratio,
        resolution=resolution,
        sample_count=args.samples or defaults.get('sample_count', 1),
        generate_audio=not args.no_audio and defaults.get('generate_audio', True),
        enhance_prompt=not args.no_enhance and defaults.get('enhance_prompt', True),
        compression_quality=defaults.get('compression_quality', 'optimized'),
        person_generation=defaults.get('person_generation', 'allow_adult'),
        seed=args.seed,
        # –ù–æ–≤—ã–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        cinematic_style=cinematic_style,
        lighting_mood=lighting_mood,
        use_enhanced_prompts=not args.disable_enhanced and enhanced_defaults.get('enabled', True)
    )

def show_showcase_scenarios(generator: SimpleTuranGenerator):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫–∞–∑–∞ —Å—Ç–æ–ª–∏–∫–æ–≤"""
    print("üé• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø–æ–∫–∞–∑–∞ TURAN Lux:")
    print("=" * 70)
    
    scenarios = generator.get_all_scenarios()
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–æ–∫—É—Å–∞–º
    focus_groups = {}
    for scenario in scenarios:
        focus = scenario['focus']
        if focus not in focus_groups:
            focus_groups[focus] = []
        focus_groups[focus].append(scenario)
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ñ–æ–∫—É—Å–æ–≤
    focus_emojis = {
        'bedroom_setting': 'üõèÔ∏è',
        'morning_lighting': 'üåÖ',
        'interior_design': 'üè†',
        'evening_comfort': 'üåÜ',
        'product_features': '‚ú®',
        'family_lifestyle': 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
        'quality_premium': 'üíé',
        'daily_integration': '‚òÄÔ∏è',
        'space_efficiency': 'üìê',
        'brand_reliability': 'üèÜ'
    }
    
    for focus, scenarios_list in focus_groups.items():
        emoji = focus_emojis.get(focus, 'üìù')
        print(f"\n{emoji} {focus.upper().replace('_', ' ')}")
        print("-" * 50)
        
        for scenario in scenarios_list:
            print(f"  üé¨ ID: {scenario['id']}")
            print(f"     –°—Ç–∏–ª—å: {scenario.get('cinematic_style', 'Standard')}")
            print(f"     –û—Å–≤–µ—â–µ–Ω–∏–µ: {scenario.get('lighting_mood', 'Natural')}")
            print(f"     –û–∑–≤—É—á–∫–∞: {scenario['russian_voiceover']}")
            print()

def show_enhancement_comparison():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ú–ü–¢–û–í - –î–û –ò –ü–û–°–õ–ï –£–õ–£–ß–®–ï–ù–ò–ô:")
    print("=" * 70)
    
    print("\n‚ùå –°–¢–ê–†–´–ô –ü–†–û–ú–ü–¢ (–ø—Ä–æ—Å—Ç–æ–π):")
    old_prompt = "Keep the dressing table exactly as shown in the image. Add: Elegant bedroom interior, warm morning light through window, camera slowly pans around the dressing table showing different angles, cozy atmosphere, soft lighting, modern home interior, 8-second elegant showcase"
    print(f"   {old_prompt}")
    print(f"   –î–ª–∏–Ω–∞: {len(old_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print("\n‚úÖ –ù–û–í–´–ô –ü–†–û–ú–ü–¢ (–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π):")
    new_prompt = "Professional commercial shot on ARRI ALEXA 35 with 50mm Zeiss Master Prime lens. Keep the TURAN Lux dressing table exactly as shown in image - preserve white glass surface, 4 drawers, LED mirror, and metallic legs unchanged. Add: Elegant contemporary bedroom interior with warm oak flooring and floor-to-ceiling windows. Warm golden hour sunlight streaming through sheer curtains, creating ethereal atmosphere with dancing light particles and soft shadows highlighting the glass surface texture. Camera begins with wide establishing shot, then executes slow dolly movement forward with subtle downward tilt, ending in intimate close-up of LED mirror lighting. Audio: gentle morning ambiance, soft fabric sounds, warm contemporary piano score building subtly. Color palette: warm whites, brushed metallics, soft golden accents. Professional commercial cinematography. No subtitles."
    print(f"   {new_prompt[:200]}...")
    print(f"   –î–ª–∏–Ω–∞: {len(new_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"\nüìà –£–õ–£–ß–®–ï–ù–ò–Ø:")
    print(f"   üìê –î–ª–∏–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ {len(new_prompt) / len(old_prompt):.1f} —Ä–∞–∑–∞")
    print(f"   üé• –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞–º–µ—Ä—ã –∏ –æ–±—ä–µ–∫—Ç–∏–≤—ã")
    print(f"   üí° –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã")
    print(f"   üéµ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∑–≤—É–∫–æ–≤–æ–π –¥–∏–∑–∞–π–Ω")
    print(f"   üé® –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞")
    print(f"   üì± –£–±—Ä–∞–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã –∏ –Ω–∞–ª–æ–∂–µ–Ω–∏—è")
    print(f"   üé¨ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤"""
    parser = argparse.ArgumentParser(
        description="ü™û TURAN Enhanced Dressing Table Generator - –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑ —Å –≥–æ—Ç–æ–≤–æ–π –æ–∑–≤—É—á–∫–æ–π",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
  python run_simple_turan.py -i images/dressing_tables -o output/videos --enhanced

  # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å —Å –∑–æ–ª–æ—Ç—ã–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º
  python run_simple_turan.py -i images/dressing_tables -o output/commercial \\
    --cinematic-style commercial --lighting-mood golden_hour

  # Lifestyle —Å—Ç–∏–ª—å –¥–ª—è Instagram/TikTok
  python run_simple_turan.py -i images/dressing_tables -o output/instagram \\
    --portrait --cinematic-style lifestyle --lighting-mood morning_soft

  # –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–∫–∞–∑–∞
  python run_simple_turan.py -i images/dressing_tables -o output/dramatic \\
    --cinematic-style dramatic --lighting-mood dramatic_contrast

  # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
  python run_simple_turan.py --compare-prompts

  # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
  python run_simple_turan.py --show-scenarios

  # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å—Ç–∞—Ä—ã–π vs –Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥)
  python run_simple_turan.py --single-image images/dressing_tables/—Å—Ç–æ–ª–∏–∫.jpg \\
    -o output/ab_test --ab-test

  # –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–≤—å—é —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
  python run_simple_turan.py -i images/dressing_tables -o output/preview --hd --enhanced
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('-i', '--input', 
                       help='–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤', 
                       default='images/dressing_tables')
    
    parser.add_argument('-o', '--output', 
                       help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ', 
                       default='output/dressing_table_enhanced')
    
    parser.add_argument('-c', '--config', 
                       help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', 
                       default='simple_turan_config.yaml')
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
    parser.add_argument('--samples', type=int, 
                       choices=range(1, 4),
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    
    parser.add_argument('--seed', type=int,
                       help='Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    
    # –§–æ—Ä–º–∞—Ç—ã –∏ –∫–∞—á–µ—Å—Ç–≤–æ
    parser.add_argument('--portrait', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ (9:16) –¥–ª—è Stories/TikTok')
    
    parser.add_argument('--hd', action='store_true',
                       help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 720p –≤–º–µ—Å—Ç–æ 1080p (–±—ã—Å—Ç—Ä–µ–µ)')
    
    # –ù–û–í–´–ï –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´
    parser.add_argument('--cinematic-style', 
                       choices=['commercial', 'lifestyle', 'dramatic', 'intimate'],
                       help='–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ')
    
    parser.add_argument('--lighting-mood',
                       choices=['golden_hour', 'morning_soft', 'evening_warm', 'dramatic_contrast', 'natural_bright'],
                       help='–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è')
    
    parser.add_argument('--enhanced', action='store_true',
                       help='–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)')
    
    parser.add_argument('--disable-enhanced', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ)')
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∞–Ω–∞–ª–∏–∑–∞
    parser.add_argument('--ab-test', action='store_true',
                       help='A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å—Ä–∞–≤–Ω–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏ –Ω–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã')
    
    parser.add_argument('--compare-prompts', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤')
    
    parser.add_argument('--export-analytics', action='store_true',
                       help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument('--no-audio', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä—É—Å—Å–∫–æ–π –æ–∑–≤—É—á–∫–∏')
    
    parser.add_argument('--no-enhance', action='store_true',
                       help='–û—Ç–∫–ª—é—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini')
    
    parser.add_argument('--storage-uri',
                       help='URI Google Cloud Storage –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (gs://bucket/path/)')
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã
    parser.add_argument('--batch-social-media', action='store_true',
                       help='–°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ü—Å–µ—Ç–µ–π —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏')
    
    parser.add_argument('--single-image',
                       help='–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É–∞–ª–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞')
    
    parser.add_argument('--custom-prompt',
                       help='–ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–∫–∞–∑–∞ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º). –ë—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument('--show-scenarios', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏')
    
    # –£—Ç–∏–ª–∏—Ç—ã
    parser.add_argument('--dry-run', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞')
    
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    
    args = parser.parse_args()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
    if args.compare_prompts:
        show_enhancement_comparison()
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        generator = SimpleTuranGenerator()
    except Exception as e:
        if not args.show_scenarios:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            sys.exit(1)
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            generator = None
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if args.show_scenarios:
        if generator:
            show_showcase_scenarios(generator)
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_data = load_config(args.config)
    
    print("ü™û TURAN Enhanced Dressing Table Generator")
    print("–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ–∫–∞–∑ —Å—Ç–æ–ª–∏–∫–æ–≤ + –ì–æ—Ç–æ–≤–∞—è —Ä—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞")
    print("=" * 65)
    
    if args.verbose:
        print(f"üìÅ –í—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {args.input}")
        print(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {args.output}")
        print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {args.config}")
        print("üéØ –ú–æ–¥–µ–ª—å: VEO 3.0 (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
        print("‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 8 —Å–µ–∫—É–Ω–¥ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
        print("üîä –û–∑–≤—É—á–∫–∞: –ì–æ—Ç–æ–≤—ã–µ —Ä—É—Å—Å–∫–∏–µ —Ç–µ–∫—Å—Ç—ã")
        print("üì∏ –°—Ç–æ–ª–∏–∫: –û—Å—Ç–∞–µ—Ç—Å—è —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ")
        enhancement_status = "–í–ö–õ–Æ–ß–ï–ù–´" if not args.disable_enhanced else "–û–¢–ö–õ–Æ–ß–ï–ù–´"
        print(f"üé¨ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è: {enhancement_status}")
        if not args.disable_enhanced:
            print(f"üé• –°—Ç–∏–ª—å: {args.cinematic_style or 'commercial'}")
            print(f"üí° –û—Å–≤–µ—â–µ–Ω–∏–µ: {args.lighting_mood or 'golden_hour'}")
        print("-" * 65)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    if not generator:
        print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        sys.exit(1)
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–∫–∞–∑–∞ —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤ –≥–æ—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = create_config_from_args(args, config_data)
    
    if args.verbose:
        print(f"üìπ –ú–æ–¥–µ–ª—å: {config.model.value}")
        print(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {config.duration_seconds} —Å–µ–∫")
        print(f"üìê –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {config.aspect_ratio.value}")
        print(f"üéØ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {config.resolution.value}")
        print(f"üîä –†—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞: {'–î–∞' if config.generate_audio else '–ù–µ—Ç'}")
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {config.sample_count}")
        print(f"üé¨ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å: {config.cinematic_style.value}")
        print(f"üí° –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å–≤–µ—â–µ–Ω–∏—è: {config.lighting_mood.value}")
        print(f"‚ú® –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: {'–î–∞' if config.use_enhanced_prompts else '–ù–µ—Ç'}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        scenarios = generator.get_all_scenarios()
        print(f"üé• –î–æ—Å—Ç—É–ø–Ω–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤: {len(scenarios)}")
        print("–ü—Ä–∏–º–µ—Ä—ã —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤:")
        for scenario in scenarios[:2]:
            print(f"  ‚Ä¢ {scenario['id']}: {scenario['russian_voiceover']}")
            print(f"    {scenario['enhanced_prompt'][:100]}...")
        print("-" * 65)
    
    # Dry run —Ä–µ–∂–∏–º
    if args.dry_run:
        print("üîç DRY RUN - –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        
        enhancement_note = " —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏" if config.use_enhanced_prompts else " (–ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–æ–º–ø—Ç—ã)"
        
        if args.single_image:
            print(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {args.single_image}")
            if args.custom_prompt:
                print(f"üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {args.custom_prompt}")
                print("üé¨ –ü—Ä–æ–º–ø—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–µ–Ω –¥–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è!")
            else:
                scenarios = generator.get_all_scenarios()
                import random
                example_scenario = random.choice(scenarios)
                print(f"üé• –ü—Ä–∏–º–µ—Ä —Å—Ü–µ–Ω–∞—Ä–∏—è: {example_scenario['id']}")
                print(f"üé¨ –°—Ç–∏–ª—å: {example_scenario.get('cinematic_style', 'Standard')}")
                print(f"üîä –û–∑–≤—É—á–∫–∞: {example_scenario['russian_voiceover']}")
            print(f"üì∏ –°—Ç–æ–ª–∏–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ{enhancement_note}")
        else:
            input_path = Path(args.input)
            if input_path.exists():
                images = list(input_path.glob("*.jpg")) + list(input_path.glob("*.png")) + list(input_path.glob("*.jpeg"))
                print(f"üì∑ –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç—É–∞–ª–µ—Ç–Ω—ã—Ö —Å—Ç–æ–ª–∏–∫–æ–≤: {len(images)}")
                for img in images[:3]:
                    print(f"  - {img.name}")
                if len(images) > 3:
                    print(f"  ... –∏ –µ—â–µ {len(images) - 3}")
                
                scenarios = generator.get_all_scenarios()
                print(f"üé• –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–∏—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∏–∑ {len(scenarios)} –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö")
                print(f"üé¨ –°—Ü–µ–Ω–∞—Ä–∏–∏ –≤–∫–ª—é—á–∞—é—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞–º–µ—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ –∏ –¥–≤–∏–∂–µ–Ω–∏—è{enhancement_note}")
            else:
                print(f"‚ùå –ü–∞–ø–∫–∞ {args.input} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")
        print(f"üìÑ JSON –æ—Ç—á–µ—Ç—ã: enhanced_showcase_scenarios.json")
        if args.storage_uri:
            print(f"‚òÅÔ∏è GCS URI: {args.storage_uri}")
        
        print("\n‚ñ∂Ô∏è –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–±–µ—Ä–∏—Ç–µ —Ñ–ª–∞–≥ --dry-run")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    Path(args.output).mkdir(parents=True, exist_ok=True)
    
    try:
        # A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if args.ab_test and args.single_image:
            print("üî¨ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            ab_output = Path(args.output) / "ab_test"
            old_output = ab_output / "traditional_prompts"
            new_output = ab_output / "enhanced_prompts"
            old_output.mkdir(parents=True, exist_ok=True)
            new_output.mkdir(parents=True, exist_ok=True)
            
            # –¢–µ—Å—Ç —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            print("\nüìπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏...")
            config_old = config
            config_old.use_enhanced_prompts = False
            
            operation_old, scenario_old = generator.generate_video_from_image(
                args.single_image, config_old, custom_prompt=args.custom_prompt,
                storage_uri=f"{args.storage_uri}/traditional/" if args.storage_uri else None
            )
            
            # –¢–µ—Å—Ç —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
            print("\nüé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏...")
            config_new = config
            config_new.use_enhanced_prompts = True
            
            operation_new, scenario_new = generator.generate_video_from_image(
                args.single_image, config_new, custom_prompt=args.custom_prompt,
                storage_uri=f"{args.storage_uri}/enhanced/" if args.storage_uri else None
            )
            
            print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ A/B –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print(f"üìù –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_old['id']}")
            print(f"üé¨ –ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario_new['id']}")
            print(f"‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–µ–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
            
            # –î–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            result_old = generator.poll_operation_status(operation_old)
            
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            result_new = generator.poll_operation_status(operation_new)
            
            print("‚úÖ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫–∞—Ö.")
            return
        
        # –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π
        if args.batch_social_media:
            print("üì± –†–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏")
            
            social_configs = generator.create_social_media_configs()
            platforms = [
                ('youtube_facebook', '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (YouTube/Facebook) - Commercial Style'),
                ('instagram_tiktok', '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (Instagram/TikTok) - Lifestyle Style')
            ]
            
            for i, (platform, description) in enumerate(platforms):
                platform_output = Path(args.output) / platform
                platform_output.mkdir(exist_ok=True)
                
                print(f"\nüé• –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {description}")
                print(f"üé¨ –°—Ç–∏–ª—å: {social_configs[i].cinematic_style.value}")
                print(f"üí° –û—Å–≤–µ—â–µ–Ω–∏–µ: {social_configs[i].lighting_mood.value}")
                
                results = generator.process_image_folder(
                    args.input,
                    str(platform_output),
                    social_configs[i],
                    storage_uri=args.storage_uri
                )
                
                successful = sum(1 for r in results if r.get("status") == "success")
                print(f"‚úÖ {platform}: {successful}/{len(results)} —É—Å–ø–µ—à–Ω–æ")
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
                if args.verbose and successful > 0:
                    print("üé• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
                    for result in results[:3]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 3
                        if result.get("status") == "success" and "scenario" in result:
                            scenario = result["scenario"]
                            print(f"  ‚Ä¢ {scenario['id']}: {scenario['russian_voiceover'][:60]}...")
                            print(f"    –°—Ç–∏–ª—å: {scenario.get('cinematic_style', 'Standard')}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        elif args.single_image:
            print(f"üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É–∞–ª–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–∏–∫–∞: {args.single_image}")
            
            operation_name, scenario = generator.generate_video_from_image(
                args.single_image,
                config,
                custom_prompt=args.custom_prompt,
                storage_uri=args.storage_uri
            )
            
            print(f"üé• –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π: {scenario['id']}")
            print(f"üé¨ –°—Ç–∏–ª—å: {scenario.get('cinematic_style', 'Standard')}")
            print(f"üí° –û—Å–≤–µ—â–µ–Ω–∏–µ: {scenario.get('lighting_mood', 'Natural')}")
            print(f"üîä –†—É—Å—Å–∫–∞—è –æ–∑–≤—É—á–∫–∞: {scenario['russian_voiceover']}")
            print(f"üéØ –§–æ–∫—É—Å: {scenario['focus']}")
            
            print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
            result = generator.poll_operation_status(operation_name)
            
            if "response" in result:
                videos = result["response"].get("videos", [])
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–æ: {len(videos)} —Ñ–∞–π–ª–æ–≤")
                
                for i, video in enumerate(videos):
                    if "gcsUri" in video:
                        print(f"‚òÅÔ∏è GCS: {video['gcsUri']}")
                    elif "bytesBase64Encoded" in video:
                        filename = f"turan_enhanced_{scenario['id']}_{Path(args.single_image).stem}_v{i}.mp4"
                        output_path = Path(args.output) / filename
                        
                        import base64
                        video_data = base64.b64decode(video["bytesBase64Encoded"])
                        with open(output_path, 'wb') as f:
                            f.write(video_data)
                        
                        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_path}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        else:
            print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ —Å —Ç—É–∞–ª–µ—Ç–Ω—ã–º–∏ —Å—Ç–æ–ª–∏–∫–∞–º–∏: {args.input}")
            enhancement_note = " —Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏" if config.use_enhanced_prompts else ""
            print(f"üé¨ –†–µ–∂–∏–º{enhancement_note}")
            
            results = generator.process_image_folder(
                args.input,
                args.output,
                config,
                storage_uri=args.storage_uri
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            report_path = Path(args.output) / "enhanced_showcase_generation_report.json"
            with open(report_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
            
            # –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ
            if args.export_analytics:
                generator.export_performance_report()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            successful = sum(1 for r in results if r.get("status") == "success")
            failed = len(results) - successful
            
            print(f"\nüéâ –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –í–ò–î–ï–û –ó–ê–í–ï–†–®–ï–ù–ê!")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {successful}")
            print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
            print(f"üìä –í—Å–µ–≥–æ: {len(results)}")
            print(f"üìÑ –û—Ç—á–µ—Ç: {report_path}")
            print(f"üé• –°—Ü–µ–Ω–∞—Ä–∏–∏: generated_showcase_scenarios.json")
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–ª—É—á—à–µ–Ω–∏–π
            if args.verbose:
                analytics = generator.get_generation_analytics()
                print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ò–ù–ï–ú–ê–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –£–õ–£–ß–®–ï–ù–ò–ô:")
                print(f"   üé¨ –£–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {analytics['enhancement_usage_percentage']:.1f}%")
                print(f"   üìù –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤: {analytics['traditional_usage_percentage']:.1f}%")
                
                scenario_usage = {}
                for result in results:
                    if result.get("status") == "success" and "scenario" in result:
                        scenario_id = result["scenario"]["id"]
                        scenario_style = result.get("cinematic_style", "Standard")
                        key = f"{scenario_id} ({scenario_style})"
                        scenario_usage[key] = scenario_usage.get(key, 0) + 1
                
                print(f"\nüé• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏:")
                for scenario_key, count in sorted(scenario_usage.items())[:5]:
                    print(f"  ‚Ä¢ {scenario_key}: {count} —Ä–∞–∑")
            
            if failed > 0:
                print(f"\n‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏:")
                for result in results:
                    if result.get("status") == "error":
                        print(f"  - {result['source_image']}: {result.get('error', 'Unknown error')}")
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()